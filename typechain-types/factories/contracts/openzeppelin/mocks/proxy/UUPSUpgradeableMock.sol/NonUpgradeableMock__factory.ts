/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  NonUpgradeableMock,
  NonUpgradeableMockInterface,
} from "../../../../../../contracts/openzeppelin/mocks/proxy/UUPSUpgradeableMock.sol/NonUpgradeableMock";

const _abi = [
  {
    inputs: [],
    name: "current",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060fc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639fa6a6e3146037578063d09de08a146051575b600080fd5b603d6059565b6040516048919060ad565b60405180910390f35b60576068565b005b6000606360006072565b905090565b607060006080565b565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000819050919050565b60a7816096565b82525050565b600060208201905060c0600083018460a0565b9291505056fea2646970667358221220d19744e79934e08e5f5608d148d697821b9014f684c61077f4045662b83f6a8164736f6c63430008090033";

type NonUpgradeableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonUpgradeableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonUpgradeableMock__factory extends ContractFactory {
  constructor(...args: NonUpgradeableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NonUpgradeableMock> {
    return super.deploy(overrides || {}) as Promise<NonUpgradeableMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NonUpgradeableMock {
    return super.attach(address) as NonUpgradeableMock;
  }
  override connect(signer: Signer): NonUpgradeableMock__factory {
    return super.connect(signer) as NonUpgradeableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonUpgradeableMockInterface {
    return new utils.Interface(_abi) as NonUpgradeableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonUpgradeableMock {
    return new Contract(address, _abi, signerOrProvider) as NonUpgradeableMock;
  }
}
