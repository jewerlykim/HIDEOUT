/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20ReturnTrueMock,
  ERC20ReturnTrueMockInterface,
} from "../../../../../contracts/openzeppelin/mocks/token/ERC20ReturnTrueMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008c578063310ec4a7146100bc578063a9059cbb146100d8578063dd62ed3e14610108575b600080fd5b61007660048036038101906100719190610286565b610138565b60405161008391906102e1565b60405180910390f35b6100a660048036038101906100a191906102fc565b610144565b6040516100b391906102e1565b60405180910390f35b6100d660048036038101906100d19190610286565b610151565b005b6100f260048036038101906100ed9190610286565b610198565b6040516100ff91906102e1565b60405180910390f35b610122600480360381019061011d919061034f565b6101a4565b60405161012f919061039e565b60405180910390f35b60006001905092915050565b6000600190509392505050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006001905092915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061021d826101f2565b9050919050565b61022d81610212565b811461023857600080fd5b50565b60008135905061024a81610224565b92915050565b6000819050919050565b61026381610250565b811461026e57600080fd5b50565b6000813590506102808161025a565b92915050565b6000806040838503121561029d5761029c6101ed565b5b60006102ab8582860161023b565b92505060206102bc85828601610271565b9150509250929050565b60008115159050919050565b6102db816102c6565b82525050565b60006020820190506102f660008301846102d2565b92915050565b600080600060608486031215610315576103146101ed565b5b60006103238682870161023b565b93505060206103348682870161023b565b925050604061034586828701610271565b9150509250925092565b60008060408385031215610366576103656101ed565b5b60006103748582860161023b565b92505060206103858582860161023b565b9150509250929050565b61039881610250565b82525050565b60006020820190506103b3600083018461038f565b9291505056fea264697066735822122070a71a53c6880c61b3d9f4b13a74e627671a8ebf958fc41dc145252312274a7464736f6c63430008090033";

type ERC20ReturnTrueMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ReturnTrueMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20ReturnTrueMock__factory extends ContractFactory {
  constructor(...args: ERC20ReturnTrueMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20ReturnTrueMock> {
    return super.deploy(overrides || {}) as Promise<ERC20ReturnTrueMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20ReturnTrueMock {
    return super.attach(address) as ERC20ReturnTrueMock;
  }
  override connect(signer: Signer): ERC20ReturnTrueMock__factory {
    return super.connect(signer) as ERC20ReturnTrueMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ReturnTrueMockInterface {
    return new utils.Interface(_abi) as ERC20ReturnTrueMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20ReturnTrueMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20ReturnTrueMock;
  }
}
