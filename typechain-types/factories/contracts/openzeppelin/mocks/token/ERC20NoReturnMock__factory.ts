/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20NoReturnMock,
  ERC20NoReturnMockInterface,
} from "../../../../../contracts/openzeppelin/mocks/token/ERC20NoReturnMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610365806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd14610078578063310ec4a714610094578063a9059cbb146100b0578063dd62ed3e146100cc575b600080fd5b61007660048036038101906100719190610232565b6100fc565b005b610092600480360381019061008d9190610272565b610100565b005b6100ae60048036038101906100a99190610232565b610105565b005b6100ca60048036038101906100c59190610232565b61014c565b005b6100e660048036038101906100e191906102c5565b610150565b6040516100f39190610314565b60405180910390f35b5050565b505050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b5050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c98261019e565b9050919050565b6101d9816101be565b81146101e457600080fd5b50565b6000813590506101f6816101d0565b92915050565b6000819050919050565b61020f816101fc565b811461021a57600080fd5b50565b60008135905061022c81610206565b92915050565b6000806040838503121561024957610248610199565b5b6000610257858286016101e7565b92505060206102688582860161021d565b9150509250929050565b60008060006060848603121561028b5761028a610199565b5b6000610299868287016101e7565b93505060206102aa868287016101e7565b92505060406102bb8682870161021d565b9150509250925092565b600080604083850312156102dc576102db610199565b5b60006102ea858286016101e7565b92505060206102fb858286016101e7565b9150509250929050565b61030e816101fc565b82525050565b60006020820190506103296000830184610305565b9291505056fea2646970667358221220b0b31c15b24090965636cdaaff44282ca21653a57ca78ba17599b2381502bc5864736f6c63430008090033";

type ERC20NoReturnMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20NoReturnMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20NoReturnMock__factory extends ContractFactory {
  constructor(...args: ERC20NoReturnMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20NoReturnMock> {
    return super.deploy(overrides || {}) as Promise<ERC20NoReturnMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20NoReturnMock {
    return super.attach(address) as ERC20NoReturnMock;
  }
  override connect(signer: Signer): ERC20NoReturnMock__factory {
    return super.connect(signer) as ERC20NoReturnMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20NoReturnMockInterface {
    return new utils.Interface(_abi) as ERC20NoReturnMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20NoReturnMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20NoReturnMock;
  }
}
