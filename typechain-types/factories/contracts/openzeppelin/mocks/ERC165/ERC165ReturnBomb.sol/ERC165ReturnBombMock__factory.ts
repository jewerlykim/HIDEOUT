/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ERC165ReturnBombMock,
  ERC165ReturnBombMockInterface,
} from "../../../../../../contracts/openzeppelin/mocks/ERC165/ERC165ReturnBomb.sol/ERC165ReturnBombMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a60048036038101906100459190610133565b610060565b604051610057919061017b565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156100ce5760016000525b62018c7c6000f35b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610110816100db565b811461011b57600080fd5b50565b60008135905061012d81610107565b92915050565b600060208284031215610149576101486100d6565b5b60006101578482850161011e565b91505092915050565b60008115159050919050565b61017581610160565b82525050565b6000602082019050610190600083018461016c565b9291505056fea26469706673582212208f78d3a9ddca59a7a18adc30879dd18d5a17d8593bba472d94a39bfa4986302064736f6c63430008090033";

type ERC165ReturnBombMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165ReturnBombMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165ReturnBombMock__factory extends ContractFactory {
  constructor(...args: ERC165ReturnBombMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC165ReturnBombMock> {
    return super.deploy(overrides || {}) as Promise<ERC165ReturnBombMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC165ReturnBombMock {
    return super.attach(address) as ERC165ReturnBombMock;
  }
  override connect(signer: Signer): ERC165ReturnBombMock__factory {
    return super.connect(signer) as ERC165ReturnBombMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165ReturnBombMockInterface {
    return new utils.Interface(_abi) as ERC165ReturnBombMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC165ReturnBombMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC165ReturnBombMock;
  }
}
