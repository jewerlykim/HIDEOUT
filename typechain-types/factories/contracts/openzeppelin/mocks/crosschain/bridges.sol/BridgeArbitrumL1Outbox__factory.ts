/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  BridgeArbitrumL1Outbox,
  BridgeArbitrumL1OutboxInterface,
} from "../../../../../../contracts/openzeppelin/mocks/crosschain/bridges.sol/BridgeArbitrumL1Outbox";

const _abi = [
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2ToL1Sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523373ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5060805161023061006560003960008181607b015261011e01526102306000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806380648b021461003b578063e78cea9214610059575b600080fd5b610043610077565b6040516100509190610181565b60405180910390f35b61006161011c565b60405161006e9190610181565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370348f3e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100df57600080fd5b505afa1580156100f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011791906101cd565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016b82610140565b9050919050565b61017b81610160565b82525050565b60006020820190506101966000830184610172565b92915050565b600080fd5b6101aa81610160565b81146101b557600080fd5b50565b6000815190506101c7816101a1565b92915050565b6000602082840312156101e3576101e261019c565b5b60006101f1848285016101b8565b9150509291505056fea2646970667358221220a3c7f44df6606ee3b4eceb607c295adbb7548c5bc03c596513d6ee6ba35a548d64736f6c63430008090033";

type BridgeArbitrumL1OutboxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeArbitrumL1OutboxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeArbitrumL1Outbox__factory extends ContractFactory {
  constructor(...args: BridgeArbitrumL1OutboxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeArbitrumL1Outbox> {
    return super.deploy(overrides || {}) as Promise<BridgeArbitrumL1Outbox>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeArbitrumL1Outbox {
    return super.attach(address) as BridgeArbitrumL1Outbox;
  }
  override connect(signer: Signer): BridgeArbitrumL1Outbox__factory {
    return super.connect(signer) as BridgeArbitrumL1Outbox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeArbitrumL1OutboxInterface {
    return new utils.Interface(_abi) as BridgeArbitrumL1OutboxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeArbitrumL1Outbox {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BridgeArbitrumL1Outbox;
  }
}
