/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  CrossChainEnabledAMB,
  CrossChainEnabledAMBInterface,
} from "../../../../../contracts/openzeppelin/crosschain/amb/CrossChainEnabledAMB";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610151380380610151833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051603f61011260003960005050603f6000f3fe6080604052600080fdfea26469706673582212204243444f89b98778ed5e44b792a14597792e53809d57e7dcc2d6d80884ab469164736f6c63430008090033";

type CrossChainEnabledAMBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrossChainEnabledAMBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CrossChainEnabledAMB__factory extends ContractFactory {
  constructor(...args: CrossChainEnabledAMBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CrossChainEnabledAMB> {
    return super.deploy(
      bridge,
      overrides || {}
    ) as Promise<CrossChainEnabledAMB>;
  }
  override getDeployTransaction(
    bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(bridge, overrides || {});
  }
  override attach(address: string): CrossChainEnabledAMB {
    return super.attach(address) as CrossChainEnabledAMB;
  }
  override connect(signer: Signer): CrossChainEnabledAMB__factory {
    return super.connect(signer) as CrossChainEnabledAMB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossChainEnabledAMBInterface {
    return new utils.Interface(_abi) as CrossChainEnabledAMBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainEnabledAMB {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CrossChainEnabledAMB;
  }
}
