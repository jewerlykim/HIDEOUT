/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC721ReceiverMock,
  ERC721ReceiverMockInterface,
} from "../../../../../contracts/erc721a/mocks/ERC721ReceiverMock.sol/ERC721ReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "retval",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "erc721aMock",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516109463803806109468339818101604052810190610032919061016e565b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166080817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506101ae565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6100ed816100b8565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061013b82610110565b9050919050565b61014b81610130565b811461015657600080fd5b50565b60008151905061016881610142565b92915050565b60008060408385031215610185576101846100b3565b5b6000610193858286016100fb565b92505060206101a485828601610159565b9150509250929050565b60805160a0516107736101d36000396000610100015260006101d001526107736000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004a600480360381019061004591906103e9565b610060565b60405161005791906104a7565b60405180910390f35b600080600083511461009657826000815181106100805761007f6104c2565b5b602001015160f81c60f81b60f81c60ff16610099565b60005b905060018114156100df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d690610574565b60405180910390fd5b60028114156100f557600060e01b9150506101f3565b600381141561018d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a14481943060016040518363ffffffff1660e01b815260040161015a9291906105e8565b600060405180830381600087803b15801561017457600080fd5b505af1158015610188573d6000803e3d6000fd5b505050505b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b03886868686614e206040516101c69594939291906106e3565b60405180910390a17f00000000000000000000000000000000000000000000000000000000000000009150505b949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023a8261020f565b9050919050565b61024a8161022f565b811461025557600080fd5b50565b60008135905061026781610241565b92915050565b6000819050919050565b6102808161026d565b811461028b57600080fd5b50565b60008135905061029d81610277565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102f6826102ad565b810181811067ffffffffffffffff82111715610315576103146102be565b5b80604052505050565b60006103286101fb565b905061033482826102ed565b919050565b600067ffffffffffffffff821115610354576103536102be565b5b61035d826102ad565b9050602081019050919050565b82818337600083830152505050565b600061038c61038784610339565b61031e565b9050828152602081018484840111156103a8576103a76102a8565b5b6103b384828561036a565b509392505050565b600082601f8301126103d0576103cf6102a3565b5b81356103e0848260208601610379565b91505092915050565b6000806000806080858703121561040357610402610205565b5b600061041187828801610258565b945050602061042287828801610258565b93505060406104338782880161028e565b925050606085013567ffffffffffffffff8111156104545761045361020a565b5b610460878288016103bb565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104a18161046c565b82525050565b60006020820190506104bc6000830184610498565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f726576657274656420696e2074686520726563656976657220636f6e7472616360008201527f7421000000000000000000000000000000000000000000000000000000000000602082015250565b600061055e6022836104f1565b915061056982610502565b604082019050919050565b6000602082019050818103600083015261058d81610551565b9050919050565b61059d8161022f565b82525050565b6000819050919050565b6000819050919050565b60006105d26105cd6105c8846105a3565b6105ad565b61026d565b9050919050565b6105e2816105b7565b82525050565b60006040820190506105fd6000830185610594565b61060a60208301846105d9565b9392505050565b61061a8161026d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561065a57808201518184015260208101905061063f565b83811115610669576000848401525b50505050565b600061067a82610620565b610684818561062b565b935061069481856020860161063c565b61069d816102ad565b840191505092915050565b6000819050919050565b60006106cd6106c86106c3846106a8565b6105ad565b61026d565b9050919050565b6106dd816106b2565b82525050565b600060a0820190506106f86000830188610594565b6107056020830187610594565b6107126040830186610611565b8181036060830152610724818561066f565b905061073360808301846106d4565b969550505050505056fea26469706673582212200dfb597636c680882321d4043176a2fff9d5f3cc857613c97e1a1cda92da171064736f6c63430008090033";

type ERC721ReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721ReceiverMock__factory extends ContractFactory {
  constructor(...args: ERC721ReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    retval: PromiseOrValue<BytesLike>,
    erc721aMock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721ReceiverMock> {
    return super.deploy(
      retval,
      erc721aMock,
      overrides || {}
    ) as Promise<ERC721ReceiverMock>;
  }
  override getDeployTransaction(
    retval: PromiseOrValue<BytesLike>,
    erc721aMock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(retval, erc721aMock, overrides || {});
  }
  override attach(address: string): ERC721ReceiverMock {
    return super.attach(address) as ERC721ReceiverMock;
  }
  override connect(signer: Signer): ERC721ReceiverMock__factory {
    return super.connect(signer) as ERC721ReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721ReceiverMockInterface {
    return new utils.Interface(_abi) as ERC721ReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721ReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721ReceiverMock;
  }
}
