/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ChildConstructorInitializableMockInterface
  extends utils.Interface {
  functions: {
    "childInitialize()": FunctionFragment;
    "childInitializerRan()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeOnlyInitializing()": FunctionFragment;
    "initializerRan()": FunctionFragment;
    "onlyInitializingRan()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "childInitialize"
      | "childInitializerRan"
      | "initialize"
      | "initializeOnlyInitializing"
      | "initializerRan"
      | "onlyInitializingRan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "childInitialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childInitializerRan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeOnlyInitializing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializerRan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyInitializingRan",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "childInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childInitializerRan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeOnlyInitializing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializerRan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyInitializingRan",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ChildConstructorInitializableMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChildConstructorInitializableMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    childInitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    childInitializerRan(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeOnlyInitializing(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializerRan(overrides?: CallOverrides): Promise<[boolean]>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<[boolean]>;
  };

  childInitialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  childInitializerRan(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeOnlyInitializing(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializerRan(overrides?: CallOverrides): Promise<boolean>;

  onlyInitializingRan(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    childInitialize(overrides?: CallOverrides): Promise<void>;

    childInitializerRan(overrides?: CallOverrides): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeOnlyInitializing(overrides?: CallOverrides): Promise<void>;

    initializerRan(overrides?: CallOverrides): Promise<boolean>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    childInitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    childInitializerRan(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeOnlyInitializing(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializerRan(overrides?: CallOverrides): Promise<BigNumber>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    childInitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    childInitializerRan(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeOnlyInitializing(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializerRan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyInitializingRan(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
